# -*- coding: utf-8 -*-
"""파이썬 기말고사.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WgCgM04DnaPU5mOC0MkSsvXVwOYcqw2Y

**<문자열 슬라이싱>**
"""

a='동해물과 백두산이 마르고 닳도록'
print(a[1:3])    #[시작번호:끝번호]
print(a[1:7:2])  #[시작번호:끝번호:step]
print(a[-3:7:-1]) #step이 음수인 경우 역방향
print(a[-3:-6:-1])  #양수는 오른쪽 부터 음수는 왼쪽부터
print(a[1::2])   #[시작번호::step] 끝까지 출력
print(a[::-1])   #거꾸로 전부 출력

"""**<리스트 활용>**"""

a=[1,2,3,4,5]
print(a)
print(a[0])
print(a[-2])

a[1]='가'     #추가 아니고 수정
print(a)

del(a[1])  #인덱스에 해당하는 값 삭제
print(a)

a.insert(1,'나') #(위치,추가할 값)
print(a)

a.append('다')   #맨뒤에 원하는 값 추가, 젤 중요!!!!!!!!!
print(a)

a.remove('나')   #원하는 값 삭제
print(a)

len(a)    #리스트 원소 개수 세기

#리스트 문자열 슬라이싱 b=a[1:]

#반복문 리스트 생성
a=[]
for i in range(1,11,1):
  a.append(i)
print(a)

#다중 리스트
b=[[1,2,3],[4,5,6],[7,8,9]]
print(b[1])
print(b[1][1])
b.append([10,11,12])
b[1].append('가')
print(b)

c=[[1,2,3],[4,5,6],[7,8,9]]
for x,y,z in c:
  print(x,y,z)

"""**<딕셔너리 활용>**"""

a={1:'가',2:'나',3:'다',4:'라',5:'마'}
print(a)
a[6]='바'  #딕셔너리이름[키]=값 추가하기
print(a)
a[5]='히히' #이미 있는 키 -> 기존 딕셔너리 수정
print(a)
del(a[5])  #del(딕셔너리이름[키]) 해당 키의 딕셔너리 삭제
print(a)

print(a.get(1))  #a.get(키) 키에 해당하는 값 출력
print(a.keys())    #모든 키 출력
print(a.values())  #모든 값 출력

print(list(a.keys())) #모든 키 리스트로 변환
print(list(a.values())) #모든 값 리스트로 변환

print(list(a.items()))  #키와 값을 튜플로 변환 (키,값)

"""**<자판기 예제>**"""

#자판기 프로그램
print("============================================")
print("==          상명대 파이썬 자판기          ==")
print("==1.캔커피 800원 2.생수 500원 3.소다 900원==")
print("============================================")

coin=int(input('동전을 입력하세요:'))
if coin<500:
  print('투입 금액이 부족합니다.')
else:
  sel=int(input('음료를 선택하세요:'))
  if sel==1:
    name='캔커피'
    price=800
  elif sel==2:
    name='생수'
    price=500
  elif sel==3:
    name='소다'
    price=900

  count=int(input('수량을 입력하세요:'))
  total_price=price*count

  if total_price>coin:
    print('결제 금액이 부족합니다.')
  else:
    returncoin=coin-total_price
    print('')
    print('선택하신 음료는 {}이고 수량{}입니다.'.format(name,count))
    print('결제 금액은 {}원 잔액은 {}입니다.'.format(total_price,returncoin))
    print('이용해주셔서 감사합니다.')



"""**<리스트 활용한 단어 찾기 예제>**"""

#보물 찾기
treaser_box = ["보물", 1, 2, "보", "물", "보 물", "1", "2", "물보", "보물 ", " 보물", ["보", "물"], "보물" ]
for index,values in enumerate(treaser_box):     #enumerate->리스트에서 인덱스와 값을 반환, 보물을 다 찾을때 까지 반복
  if values=='보물':
    print('인덱스{}에서 보물을 찾았습니다.'.format(index))

#친구 찾기
friends_list = ["대한", "민국", "아름", "다운", "우리", "나라", "강산"]
print('친구목록:',friends_list)
add=input('추가하고 싶은 친구 이름:')

friends_list.append(add)
print(friends_list)

find=input('찾고 싶은 친구 이름:')
if find in friends_list:
  print('친구 {}을 찾았습니다'.format(find))
elif find not in friends_list:
  print('친구 {}을 찾지 못했습니다'.format(find))

#친구 찾기2
friends_list=[]
for i in range(5):
  name=input('친구 이름 입력:')
  friends_list.append(name)
print(friends_list)

while True:
  find=input('친구를 찾을 것인가요?(y/n):')
  if find=='y':
    find_name=input('찾고 싶은 친구 이름을 입력하세요:')
    if find_name in friends_list:
      print(find_name)
    elif find_name not in friends_list:
      print('친구를 찾지 못했습니다.')
  elif find=='n':
    print('프로그램을 종료합니다.')
    break
  else:
    print('입력 오류로 프로그램을 종료합니다')
    break

"""**<딕셔너리 활용한 도시 찾기 예제>**"""

capitals = {"대한민국":"서울","가나":"아크라","노르웨이":"오슬로","덴마크":"코펜하겐","러시아":"모스코바",
            "멕시코":"멕시코시티","벨기에":"브뤼셀","스페인":"마드리드","이집트":"카이로","자메이카":"킹스턴",
            "체코":"프라하","캐나다":"오타와","터키":"앙카라","포르투갈":"리스본","헝가리":"부다페스트"}
def displaymenu():
    print("\n")
    print("=====  국가별 수도(Capital)찾기 프로그램 (Ver0.1) =====")
    print("\n")
    print("\t1.국가별 수도 보기\n\t2.국가별 수도 찾기\n\t3.국가별 수도 추가\n\t4.프로그램 종료하기")
    print("\n")
    print("=======================================================")
    print("\n")

def capitals_preview():
    print("-------------------------------------------------")
    print("*** 총 %s개국 국가별 수도 ***"%len(capitals.keys()))  #딕셔너리 키 개수 셈, %s=문자열
    for key,value in capitals.items() :            #키와 값을 튜플로 반환후 키와 값을 반복해서 출력
        print("국가:%s \t수도:%s"%(key,value))
    print("-------------------------------------------------")
    print("\n")

def capitals_find():
  find=input('수도를 알고싶은 국가를 입력하세요:')

  if find in capitals:
    print('입력한 국가 %s의 수도를 찾았습니다.'%find)
    print('국가:{} 수도:{}'.format(find,capitals.get(find)))
    print('\n')

  else:
    print('입력하신 국가 %s의 수도는 찾을 수 없습니다.'%find)
    print('\n')
    add=input('국가의 수도를 추가 하시겠습니까?(y/n):')
    if add=='y':
      capitals_insert()
    elif add=='n':
      return
    else:
      return
    return

def capitals_insert():
  nation=input('국가를 입력하세요:')
  capital=input('수도를 입력하세요:')

  if nation.isspace()&capital.isspace():
      print("입력 오류입니다")
      return

  else:
      if nation in capitals :
          print("국가:%s \t수도:%s 이미 입력되어 있습니다"%(nation, capitals.get(nation)))
          print("\n")
          return
      else:
          capitals[nation]=capital
          print("국가:%s \t수도:%s 추가하였습니다"%(nation,capital))
          print("\n")

def find_capital():
    displaymenu()

    menu = int(input("메뉴 번호를 입력하세요"))

    if menu==1:
        capitals_preview()
        find_capital()

    elif menu==2:
        capitals_find()
        find_capital()

    elif menu==3:
        capitals_insert()
        find_capital()

    elif menu==4:
        print("프로그램을 종료합니다")
        return

find_capital()

"""**<데이터프레임을 활용한 데이터 출력과 그래프 예제>**"""

import pandas as pd
import matplotlib.pyplot as plt
x=[2015,2016,2017,2018,2019]
y=[5,3,2,3,4]
y_2=[1,2,3,4,5]
#plt.plot(x,ycolor='blue',marker='o',linestyle='solid')
plt.plot(x,y)
plt.bar(x,y_2)
plt.xlim(2014.5,2019.5)
#plt.ylim(6,1)
plt.title('Rankings')
plt.xlabel('year')
plt.ylabel('rank')
plt.show()

import numpy as np
from matplotlib import pyplot as plt

def score_book():
    scores = {"국어":0 , "영어":0 , "수학":0 , "과학":0 }

    for key in scores.keys():
        score = input("{} 과목 점수를 입력하세요".format(key))
        scores[key] = score

    drawing_chart(scores)

def drawing_chart(scores):
    value_arr = list(map(float, scores.values()))  #리스트의 모든 값을 실수로 변환후 리스트로 변환

    sum = np.sum((value_arr))           #numpy 사용
    avg = np.average(value_arr)
    var = np.var(value_arr)
    std = np.std(value_arr)

    scores["총합"] = sum
    scores["평균"] = avg
    scores["분산"] = var
    scores["표준편차"] = std

    print("==통계결과==")
    for key,value in scores.items():
        print("{}: {}".format(key,value))

    value_arr_total = list(map(float, scores.values()))

    score_chart_dict = {"subject_x": scores.keys(), "scores_y": value_arr_total }
    plt.bar("subject_x", "scores_y", color = ["orange", "pink", "blue", "yellow","green","red"],
            data=score_chart_dict)
    plt.show()

score_book()

"""**<파일 입출력 예제-IDLE>**"""

file=open('test2.txt','w',encoding='utf-8')
msg=input('강의소감을 입력하세요!')
file.write('문자열')
file.write(msg)
file.close()

file=open('test2.txt','r',encoding='utf8')
a=file.read()
print(a)
file.close()